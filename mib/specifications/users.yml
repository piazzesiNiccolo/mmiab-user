openapi: "3.0.1"
info:
  title: Users Service API
  description: Users Microservice of Message in a Bottle Application
  version: "0.1"

servers:
  - url: /

paths:
  /user:
    post:
      summary: Add a new user
      tags:
        - Users
      operationId: mib.resources.users.create_user
      requestBody:
        description: Create a new customer inside microservice app
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Created
        200:
          description: User already exists
        default:
          description: Error during creation of the user

  /user/filter_value/{id_usr}:
    get:
      tags: [Users]
      parameters:
        - in: path
          name: id_usr
          required: true
          schema:
            type: integer
            format: int64
          description: id of the user for whom the toggle is returned
      description: Return the value boolean of the content filter
      operationId: mib.resources.users.get_users_toggle_content_filter
      responses:
        200:
          description: Return toggle content filter
          content:
           application/json:
              schema:
                type: object
                properties:
                  value:
                    type: boolean
        404:
          description: User not found
        default:
          description: An error occured during retrieving the toggle

  /users_list/{id}:
    get:
      tags: [Users]
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: search users with the keyword specified
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: id of the user for whom the list is returned
      description: Gets the list of all users for the user identified by id
      operationId: mib.resources.users.get_users_list
      responses:
        200:
          description: Return users list
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        404:
          description: User id not found
        default:
          description: An error occured during retrieving the user

  /recipients/{id}:
    get:
      tags: [Users]
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: search recipients with the keyword specified
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: id of the sender of the message for which the recipients are being retrieved
      description: Gets the list of all recipients identified by array ids (if present) filtered by query q
      operationId: mib.resources.users.get_recipients
      responses:
        200:
          description: Return recipients list
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipients:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserDisplay'
        404:
          description: Sender id not found
        default:
          description: An error occured during retrieving the user

  /users/display_info:
    get:
      tags: [Users]
      parameters:
        - in: query
          name: ids
          schema:
            type: array
            items:
              type: integer
              format: int64
          description: return recipients identified by ids in this array
      description: Gets the list of all recipients identified by array ids (if present) filtered by query q
      operationId: mib.resources.users.get_users_display_info
      responses:
        200:
          description: Return recipients list
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipients:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserDisplay'
        default:
          description: An error occured during retrieving the user

  /blacklist/{id}:
    get:
      tags: [Users]
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: search users with the keyword specified
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: id of the user for whom the list is returned
      description: Gets the list of blocked users for the user identified by id
      operationId: mib.resources.users.get_blacklist
      responses:
        200:
          description: Return blocked users list
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        default:
          description: An error occured during retrieving the user

  /blacklist/{blocking}/{blocked}:
    put:
      tags: [Users]
      parameters:
        - in: path
          name: blocking
          required: true
          schema:
            type: integer
            format: int64
          description: id of the blocking user
        - in: path
          name: blocked
          required: true
          schema:
            type: integer
            format: int64
          description: id of the blocked user
      description: Lets the blocking user to blacklist another user
      operationId: mib.resources.users.add_to_blacklist
      responses:
        200:
          description: User already in blacklist
        201:
          description: User added to blacklist
        404:
          description: Blocking or blocked user not found
        403:
          description: Users cannot blacklist themselves
        default:
          description: An error occured during retrieving the user
    delete:
      tags: [Users]
      parameters:
        - in: path
          name: blocking
          required: true
          schema:
            type: integer
            format: int64
          description: id of the blocking user
        - in: path
          name: blocked
          required: true
          schema:
            type: integer
            format: int64
          description: id of the blocked user
      description: Lets the blocking user to remove from blacklist another user
      operationId: mib.resources.users.remove_from_blacklist
      responses:
        200:
          description: User removed from blacklist
        404:
          description: Blocking or blocked user not found
        default:
          description: An error occured during retrieving the user

  /report/{id_reporter}/{id_reported}:
    put:
      tags: [User]
      description: Enables the user identified by id_reporter to report a user identified by id_reported
      operationId: mib.resources.users.report
      parameters:
        - name: id_reporter
          description: if of the reporting user
          in: path
          required: true
          schema:
            type: integer
            format: int64
        
        - name: id_reported
          description: if of the reported user
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: User already reported
        201:
          description: User correctly reported
        403:
          description: Users cannot report themselves
        404:
          description: User not found

  /user_status/{id}/{other}:
    get:
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: id of the blocking user
        - in: path
          name: other
          required: true
          schema:
            type: integer
            format: int64
          description: id of the blocked user
      description: Checks if the other user has been blocked or reported by the user identified by id
      operationId: mib.resources.users.user_status
      responses:
        200:
          description: Return the state of the other user
          content:
            application/json:
              schema:
                type: object
                properties:
                  blocked:
                    type: boolean
                  reported:
                    type: boolean
        default:
          description: An error occured during retrieving the user


  /content_filter/{id}:
    get:
      summary: Set content filter
      tags: [ Users ]
      operationId:  mib.resources.users.toggle_content_filter
      parameters:
        - name: id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Status content filter changed, return new value
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: boolean
        404:
          description: User not found
        default:
          description: An error occured during set the content filter


  /user/{user_id}:
    get:
      tags: [ User ]
      description: Get a user by its id
      operationId: mib.resources.users.get_user
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return user
        404:
          description: User not found
        default:
          description: An error occured during retrieving the user
    put:
      tags: [ User ]
      description: Modify a user information
      operationId: mib.resources.users.update_user
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Password incorrect
        201:
          description: User information modified correctly
        404:
          description: User not found
        400:
          description: Unique fields already exists
        default:
          description: An error occured during modifing the user

    delete:
      tags: [ User ]
      description: Delete a user by its id
      operationId: mib.resources.users.delete_user
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        202:
          description: User deleted
        404:
          description: User not found
        default:
          description: An error occured during the deletion the user

  /user_email/{user_email}:
    get:
      tags: [ User ]
      description: Get a user by its email
      operationId: mib.resources.users.get_user_by_email
      parameters:
        - name: user_email
          description: User Unique Email
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return user
        404:
          description: User not found
        default:
          description: An error occured during retrieving the user

  /authenticate:
    post:
      summary: Authenticate a user
      tags: [ Users ]
      operationId: mib.resources.auth.authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              x-body-name: auth
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@studenti.unipi.it
                password:
                  type: string
                  example: abcd123A
      responses:
        200:
          description: User credentials are correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  authentication:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  user:
                    $ref: '#/components/schemas/User'

        400:
          description: User credentials are not correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  authentication:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
        default:
          description: An error occured during login
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_message:
                    type: string        
components:
  schemas:
    User:
      required:
        - first_name
        - last_name
        - email
        - birthdate
      type: object
      properties:
        first_name:
          type: string
          description: First name of user
          example: Mario
        last_name:
          type: string
          description: Last name of user
          example: Rossi
        nickname:
          type: string
          description: Nickname of user
          example: '_mariorossi_'
        location:
          type: string
          description: Place of user
          example: Pisa
        pfp_path:
          type: string
          description: Path of user profile picture
          example: 'default.png'
        blacklist:
          type: string
          description: List of blacklisted users
          example: '1|2'
        content_filter:
          type: boolean
          description: Flag for content filter of user
          example: false
        lottery_points:
          type: integer
          description: Number of user lottery points
          example: 0
          format: int64
        is_banned:
          type: boolean
          description: Flag indicating if user is banned
          example: false
        email:
          type: string
          description: User email
          example: mario.rossi@example.org
          format: email
        birthdate:
          type: string
          description: User birthdate
          example: '2020-01-01'
          format: date
        phone:
          type: string
          description: User phone number
          example: '+39 3332222384'
          minLength: 10
          maxLength: 25
        password:
          type: string
          description: User password
          example: 'abcd1234'
          minLength: 5
          maxLength: 127
    
    UpdateUser:
      required:
        - email
        - password
        - phone
      type: object
      properties:
        email:
          type: string
          description: Customer email
          example: mario.rossi@example.org
          format: email
        password:
          type: string
          description: Customer password
          example: 'abcd1234'
          minLength: 5
          maxLength: 127
        phone:
          type: string
          description: Customer phone number
          example: '+39 3332222384'
          minLength: 10
          maxLength: 25

    UserDisplay:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: User id
        first_name:
          type: string
          description: First name of user
        last_name:
          type: string
          description: Last name of user
        nickname:
          type: string
          description: Nickname of user
        email:
          type: string
          format: email
          description: User email
        phone:
          type: string
          description: User phone number
          minLength: 10
          maxLength: 25

